use crate::tokens::{Token, LexicalError};
use crate::ast::*;

grammar;


extern {
  type Location = usize;
  type Error = LexicalError;

  enum Token {
    "int" => Token::Integer(<i32>),
    "localcell" => Token::LocalCell(<(u32, u32)>),
    "globalcell" => Token::GlobalCell(<(String, u32, u32)>),
    "MoveUp" => Token::MoveUp,
    "(" => Token::LParen,
    ")" => Token::RParen,
    "=" => Token::Assign,
    ":" => Token::Colon,
    "+" => Token::OperatorAdd,
    "-" => Token::OperatorSub,
    "*" => Token::OperatorMul,
    "/" => Token::OperatorDiv,

    "Sum" => Token::Sum,
    "Avg" => Token::Avg,
    "Min" => Token::Min,
    "Max" => Token::Max,
    "Stdev" => Token::Stdev,
    "Sleep" => Token::Sleep,
  }
}


pub Expr: Box<Expr> = { // (1)
    Expr ExprOp Factor => Box::new(Expr::Op(<>)), // (2)
    Factor,
};

ExprOp: BinaryOp = { // (3)
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
};

Factor: Box<Expr> = {
    Factor FactorOp Atom => Box::new(Expr::Op(<>)),
    Atom,
};

FactorOp: BinaryOp = {
    "*" => BinaryOp::Mul,
    "/" => BinaryOp::Div,
};

Atom: Box<Expr> = {
    "int" => Box::new(Expr::Number(<>)),
    "-" <i: "int"> => Box::new(Expr::Number(-i)),
    "(" <Expr> ")",
    <cr: "localcell"> => { 
        let (col, row) = cr;
        Box::new(Expr::Cell(Addr::Local{col, row})) },  //NOTE: Why am I doing Box::new everywhere?. Also, how come tokens returns Option<_> but stufff is working?!?
    <scr: "globalcell"> => { 
        let (sheet, col, row) = scr;
        Box::new(Expr::Cell(Addr::Global{sheet, col, row})) },
};


